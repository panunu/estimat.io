// Generated by CoffeeScript 1.4.0
(function() {
  var cards, io, people, scale, _;

  io = require('socket.io').listen(3000);

  _ = require('underscore');

  people = [];

  cards = [];

  scale = ['0', '0.5', '1', '2', '3', '5', '8', '13', '20', '40', '100', '?'];

  io.sockets.on('connection', function(socket) {
    var channel;
    channel = null;
    socket.on('subscribe', function(room) {
      socket.join(channel = room);
      people.push(socket.id);
      io.sockets.emit('people', people.length);
      return io.sockets.emit('scale', scale);
    });
    socket.on('disconnect', function() {
      people = people.filter(function(x) {
        return x !== socket.id;
      });
      cards = cards.filter(function(x) {
        return x !== socket.id;
      });
      return io.sockets.emit('people', people.length);
    });
    socket.on('ready', function(card) {
      var all, values;
      cards = cards.filter(function(x) {
        return x.id !== socket.id;
      });
      if (_.contains(scale, card)) {
        cards.push({
          'id': socket.id,
          'card': card
        });
      }
      if (cards.length === people.length) {
        all = cards.map(function(x) {
          return x.card;
        });
        values = all.filter(function(x) {
          return x !== '?';
        });
        values = values.length > 0 ? values : [0];
        cards = [];
        return io.sockets.emit('ready', {
          'values': all,
          'avg': _.reduce(values, function(x, y) {
            return parseFloat(x) + parseFloat(y);
          }) / values.length,
          'min': _.min(values),
          'max': _.max(values)
        });
      }
    });
    return socket.on('cancel', function() {
      return cards = cards.filter(function(x) {
        return x.id !== socket.id;
      });
    });
  });

}).call(this);
